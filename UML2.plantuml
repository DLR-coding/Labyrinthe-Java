@startuml


'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
top to bottom direction

package src {
package model {
    class Board {
      + <<Create>>Board():
      - moveDown(numCol:Integer)
      + printBoard()
      - moveRight(numRow:Integer)
      - moveUp(numCol:Integer)
      + setTile(position:Position, tile:Tile)
      + getTile(position:Position): Tile
      - moveLeft(numRow:Integer)
      + addExtraTile(direction:Direction, numRowOrCol:Integer)
    }
    enum Direction << enumeration >> {
      + RIGHT:
      + LEFT:
      + DOWN:
      + UP:

    }
    class Game {
      + <<Create>>Game():
      + _isFinished: Boolean
      + startGame()
      - initializePlayers()
      + initializeBoard()
      + endGame()
    }


    enum Goals << enumeration >> {
      + Goals():
      + G2:
      + G8:
      + G12:
      + G21:
      + G7:
      + G11:
      + G14:
      + G20:
      + G22:
      + G1:
      + G18:
      + G24:
      + G13:
      + G9:
      + G10:
      + G23:
      + G17:
      + G15:
      + G3:
      + G5:
      + G6:
      + G19:
      + G4:
      + G16:
    }


    class Player {
      + <<Create>>Player(position:Position, numplayer:Integer):
      + _name: String
      + _numPlayer: Integer
      + movecDirection, Board): Boolean
      - getOppositeDirection(direction:Direction): Direction
      + getPosition(): Position
      + setPosition(position:Position)
      + getCurrentGoal(): Goals
    }
    class Position {
      + <<Create>>Position(row:Integer,col:Integer):
      - _row: Integer
      - _column: Integer
      + getColumn(): Integer
      + setColumn(col:Integer)
      + setRow(row:Integer)
      + getRow(): Integer
    }
    enum RotationFromOriginal << enumeration >> {
      + CW90:
      + CW270:
      + DEFAULT:
      + CW180:
    }
    class Tile {
      + <<Create>>Tile(type:String, rotation:RotationFromOriginal, goal:Goals, paths:Direction[1..4]):
      + _type: String
      + getType(): String
      + isPathOpen(direction:Direction): Boolean
      + getPaths(): Direction[]
      + getOrientation(): RotationFromOriginal
      + setType(String)
      + toString(): String
      + setPaths(paths:Direction[])
      + displayPaths(): String
      + setOrientation(rotation:RotationFromOriginal)
      + getGoal(): Goals
      - rotatePaths(paths:Direction[], rotation:RotationFromOriginal): Direction[]
      + setGoal(Goals)
      - getRotatedDirection(direction:Direction, rotation:RotationFromOriginal): Direction
      + rotate()
      - getNextOrientation(rotation:RotationFromOriginal): RotationFromOriginal
    }
    class TileAngle {
      + <<Create>>TileAngle(rotation:RotationFromOriginal, goals:Goals):
    }
    class TileFactory {
      + <<Create>>TileFactory():
      + createTileT(rotation:RotationFromOriginal, Goals): Tile
      + createRandomTile(Goals): Tile
      + createTileStraight(rotation:RotationFromOriginal, Goals): Tile
      + createTileAngle(rotation:RotationFromOriginal, Goals): Tile
    }
    class TileStraight {
      + <<Create>>TileStraight(rotation:RotationFromOriginal, Goals):
    }
    class TileT {
      + <<Create>>TileT(rotation:RotationFromOriginal, Goals):
    }




}

package view {
         class GameUI {
               + <<Create>>GameUI():
               - _tiles: JLabel[][]
               - _extraTile: JLabel
               - _game: JPanel
               - _board: JPanel
               - moveColumn(numCol:Integer, direction:Direction)
               + replicateBoard(board:Tile[][], tile:Tile)
               - moveRow(numRow:Integer, direction:Direction)
               - setImage(label:JLabel, image:BufferedImage)
               - tileToLabel(tile:Tile, label:JLabel)
               - rotateTileClockwise(tile:JLabel)
             }

         class ImageHelper {
                + <<Create>>ImageHelper():
                + merge(String, String[]): BufferedImage
                + rotateCounterClockwise(BufferedImage): BufferedImage
                + rotate(BufferedImage, double): BufferedImage
                + rotateClockwise(BufferedImage): BufferedImage
              }
     }
     package controller {
          class GameController {
            + <<Create>>GameController(gale:Game):
          }
     }

class Main_test1 {
           + Main_test1():
           + main(String[])
}
 class Main_test2 {
   + Main_test2():
   + main(String[])
 }
 class Main_test3 {
   + Main_test3():
   + main(String[])
 }
 class Main_test4 {
   + Main_test4():
   + main(String[])
 }
}

Board                "1" *-[#595959,plain]-> "_players\n*" Player
Board                 -[#595959,dashed]->  Position             : "«create»"
Board                "1" *-[#595959,plain]-> "_tiles\n49" Tile
Board                "1" *-[#595959,plain]-> "_extratile\n1" Tile
Board                 -[#595959,dashed]->  Tile                 : "«create»"
Game                 "1" *-[#595959,plain]-> "_board\n1" Board
Game                  -[#595959,dashed]->  Board                : "«create»"
Game                 "1" *-[#595959,plain]-> "_allGoals\n24" Goals
Game                  -[#595959,dashed]->  Player               : "«create»"
Game                  -[#595959,dashed]->  Position             : "«create»"
Game                  -[#595959,dashed]->  TileFactory          : "«create»"
GameController       "1" *-[#595959,plain]-> "_game\n1" Game
Main_test1            -[#595959,dashed]->  Board                : "«create»"
Main_test1            -[#595959,dashed]->  Player               : "«create»"
Main_test1            -[#595959,dashed]->  Position             : "«create»"
Main_test1            -[#595959,dashed]->  TileFactory          : "«create»"
Main_test2            -[#595959,dashed]->  Game                 : "«create»"
Main_test3            -[#595959,dashed]->  Board                : "«create»"
Main_test3            -[#595959,dashed]->  Player               : "«create»"
Main_test3            -[#595959,dashed]->  Position             : "«create»"
Main_test3            -[#595959,dashed]->  TileFactory          : "«create»"
Main_test4            -[#595959,dashed]->  GameUI               : "«create»"
Player                -[#595959,dashed]->  Position             : "«create»"
Player               "1" *-[#595959,plain]-> "_position\n1" Position
Tile                 "1" *-[#595959,plain]-> "goal\n1" Goals
TileAngle             -[#595959,plain]-^  Tile
TileFactory           -[#595959,dashed]->  TileAngle            : "«create»"
TileFactory           -[#595959,dashed]->  TileStraight         : "«create»"
TileFactory           -[#595959,dashed]->  TileT                : "«create»"
TileStraight          -[#595959,plain]-^  Tile
TileT                 -[#595959,plain]-^  Tile
Player     "1" *-[#595959,plain]-> "_goalsList\n*" Goals
Player     "1" *-[#595959,plain]-> "_initialPosition\n*" Position
Tile       "1" *-[#595959,plain]-> "_paths\n1..4" Direction
Tile       "1" *-[#595959,plain]-> "_orientation\n1" RotationFromOriginal
@enduml
