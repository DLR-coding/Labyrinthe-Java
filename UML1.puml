@startuml

'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml

class Board {
  - _extraTile: Tiles
  - _tiles_list : ArrayList<ArrayList<Tiles>>
  + <<Create>> Board():
  + addExtraTile(extratile:Tiles)
  + moveRow(direction:Integer  , extratile:Tiles)
  + moveColumn(direction:Integer  , extratile:Tiles)
  + getTile(Position): Tiles
  + setTile(Position, Tiles)
}

class Game {
  + <<Create>>Game():
  - _board: Board
  - _pawns: List<Pawn>
  + startGame()
  + endGame()

}

class Goal {
  - _numGoal: Integer
  + <<Create>> Goal(numGoal : Integer)
  + getNumGoal(): Integer
  + setNumGoal(numgoal:Integer)
}



class Pawn {

  - _position: Position
  + <<Create>> Pawn(Position):
  + move( direction:Integer , board:Board): Boolean
  + isMoveValid(Move, Board): Boolean
  + getPosition(): Position
  + setPosition(Position)
}
class Position {
    - x: Integer
  - y: Integer
  + <<Create>> Position(x:Integer, y:Integer)
  + setX(Integer)
  + getX(): Integer
  + getY(): Integer
  + setY(Integer)
}
class Tiles <<abstract>> {
    - _type : String
  -  _orientation: Integer
  -  _goal: Goal
  -  _paths: ArrayList<Boolean>
  + <<Create>> Tiles(type:String, orientation:Integer , goal:Goal, pathsTab:ArrayList<Boolean>)
  + rotate()
    + isPathOpen(direction:Integer): Boolean

  + setPaths(ArrayList<Boolean>)
  + getPaths(): ArrayList<Boolean>
  + setOrientation(orientation:Integer)
  + getGoal(): Goal
  + setGoal(Goal)
  + getOrientation(): Integer
  + setType(String)
  + getType(): String
}
class Tiles_Angle extends Tiles {
  + <<Create>> Tiles_Angle(oreintation:Integer, goal:Goal):
}
class Tiles_Straight extends Tiles {
  + <<Create>> Tiles_Straight(oreintation:Integer, goal:Goal):
}

class Tiles_T extends Tiles {
  + <<Create>> Tiles_T(oreintation:Integer, goal:Goal):
}



@enduml
